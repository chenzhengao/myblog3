<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置信息，每60s扫描一次，这里的debug若设置为true，则会实时打印出logback的信息，所以这里我们设置为false-->
<configuration scan="true" scanPeriod="60 second" debug="false">
    <!-- 定义参数常量 -->
    <!-- TRACE<DUBUG<INFO<WARNING<ERROR 从小到大 -->
    <!-- log的level默认值是debug -->
    <property name="log.level" value="debug"></property>
    <!-- 文件保留时间。30天 -->
    <property name="log.maxhistory" value="30"></property>
    <!-- 日志文件的存储跟路径，catalina.base是tomcat下实例的路径 -->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"></property>
    <!-- 日志内容的形式（格式） +执行的线程+日志级别+日志相关的信息-->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"></property>
    <!-- 定义4个appender，后三个将日志分为3个级别。 -->
    <!-- 输出到控制台的配置-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 类似于layout，并有将转化后的文件写入文件中的功能 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>
    <!-- DEBUG -->
    <!-- class代表相关的类 -->
    <appender name="debugAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/debug.log</file>
        <!-- rolling策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称，压缩文件的形式 -->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史 -->
            <maxHistory>
                ${log.maxhistory}
            </maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!-- 过滤器,过滤掉非dubug level的信息。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch><!-- 过滤掉非debug信息 -->
        </filter>
    </appender>
    <!-- INFO 与debug配置形式相似-->
    <appender name="infoAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>
                ${log.maxhistory}
            </maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- ERROR 与debug配置形式相似 -->
    <appender name="errorAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.filePath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称 -->
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量 -->
            <maxHistory>
                ${log.maxhistory}
            </maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- logger配置，定义日志对象 ，日志需要记录的package。需要与appender绑定 -->
    <!-- additivity =true,logger会将root下面的appender放入logger中，此项目中，会在控制台中输入相关的信息。 -->
    <logger name="myblog" level="${log.level}" additivity="true">
        <appender-ref ref="debugAppender"></appender-ref>
        <appender-ref ref="infoAppender"></appender-ref>
        <appender-ref ref="errorAppender"></appender-ref>
    </logger>
    <!--  特殊的logger，相当于logger的父属性-->
    <root level="info">
        <appender-ref ref="consoleAppender"></appender-ref>
    </root>
</configuration>
